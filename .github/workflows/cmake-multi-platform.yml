name: Build Mini Engine V2
run-name: Building Mini-Tech ${{ github.event_name }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: self-hosted
    env:
      gaffer_version: 1.5.7.0

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2019]
        build_type: [Release]
        include:
          - name: linux
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            python_version: "3.10"
            parallel_switch: -j2
            compiler_suffix: -gcc9
          - name: windows
            os: windows-2019
            c_compiler: cl
            cpp_compiler: cl
            python_version: "310"
            parallel_switch: /m:2
            compiler_suffix: ""

    steps:
      - uses: actions/checkout@v4

      - uses: ilammy/msvc-dev-cmd@v1.12.1
        with:
          sdk: 10.0.17763.0

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_ENV"
          echo "gaffer-root-dir=${{ github.workspace }}/gaffer-${{ env.gaffer_version }}-${{ matrix.name }}" >> "$GITHUB_ENV"
          echo "install-dir=${{ github.workspace }}/build/.install/mini-engine-${{ env.gaffer_version }}" >> "$GITHUB_ENV"

      - name: Download and Unpack Bullet (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://github.com/bulletphysics/bullet3/archive/refs/tags/3.25.tar.gz
          tar -xvf 3.25.tar.gz

      - name: Download Bullet (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          curl -L --output bullet.zip --url https://github.com/bulletphysics/bullet3/archive/refs/tags/3.25.tar.gz
        shell: pwsh

      - name: Unpack Bullet (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          Expand-Archive -Path bullet.zip -DestinationPath ${{ github.workspace }}
        shell: pwsh

      - name: Configure Bullet (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          cmake -DUSE_MSVC_RUNTIME_LIBRARY_DLL=ON -DINSTALL_LIBS=ON -DCMAKE_BUILD_TYPE=Release -B ${{ github.workspace }}/.bullet-build -S ${{ github.workspace }}/bullet3-3.25/ -DCMAKE_INSTALL_PREFIX:PATH=${{ env.build-output-dir }}/.install/mini-engine-${{ env.gaffer_version }}

      - name: Configure Bullet (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -DINSTALL_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=1 -B ${{ github.workspace }}/.bullet-build -S ${{ github.workspace }}/bullet3-3.25/ -DCMAKE_INSTALL_PREFIX:PATH=${{ env.build-output-dir }}/.install/mini-engine-${{ env.gaffer_version }}

      - name: Build Bullet
        run: cmake --build ${{ github.workspace }}/.bullet-build --config ${{ matrix.build_type }} -- ${{ matrix.parallel_switch }}

      - name: Install Bullet
        run: cmake --install ${{ github.workspace }}/.bullet-build --config ${{ matrix.build_type }}

      - name: Prepare Gaffer Release (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://github.com/GafferHQ/gaffer/releases/download/${{ env.gaffer_version }}/gaffer-${{ env.gaffer_version }}-linux-gcc11.tar.gz
          tar -xvf gaffer-${{ env.gaffer_version }}-linux-gcc11.tar.gz

      - name: Prepare Gaffer Release (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          curl -L --output gaffer.zip --url https://github.com/GafferHQ/gaffer/releases/download/${{ env.gaffer_version }}/gaffer-${{ env.gaffer_version }}-windows.zip
        shell: pwsh

      - name: Unpack Gaffer (Windows)
        if: matrix.os == 'windows-2019'
        run: |
          Expand-Archive -Path gaffer.zip -DestinationPath ${{ github.workspace }}
        shell: pwsh

      - name: Configure CMake
        run: |
          cmake -B ${{ env.build-output-dir }} \
            -DGAFFER_ROOT=${{ github.workspace }}/gaffer-${{ env.gaffer_version }}-${{ matrix.name }}${{ matrix.compiler_suffix }} \
            -DPYTHON_VERSION='${{ matrix.python_version }}' \
            -D3RDPARTY_ROOT=${{ env.build-output-dir }}/.install/mini-engine-${{ env.gaffer_version }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
            -DCMAKE_INSTALL_PREFIX:PATH=${{ env.build-output-dir }}/.install/mini-engine-${{ env.gaffer_version }} \
            -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ env.build-output-dir }} --config ${{ matrix.build_type }} -- ${{ matrix.parallel_switch }}

      - name: Install
        run: cmake --install ${{ env.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Make Archive
        run: |
          cd ${{ env.build-output-dir }}/.install
          tar -zcvf ${{ env.build-output-dir }}/mini-engine-${{ env.gaffer_version }}.tar.gz mini-engine-${{ env.gaffer_version }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mini-engine-${{ matrix.name }}-gaffer-${{ env.gaffer_version }}-release
          path: ${{ env.build-output-dir }}/mini-engine-${{ env.gaffer_version }}.tar.gz
